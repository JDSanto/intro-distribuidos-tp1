#!/usr/bin/python3
import signal
import logging
import traceback
import threading
import os

from lib.tcpserver import TCPServer
from lib.udpserver import UDPServer
from lib import utils


class SigException(Exception):
    pass


def sig_handler(sig, frame):
    raise SigException()


def receive_file(socket, dest_folder, logger):
    if not os.path.isdir(dest_folder):
        logger.info(f"Creating destination folder: {dest_folder}")
        os.makedirs(dest_folder)

    # Recieve filename size and file size
    file_size = int.from_bytes(socket.receive_data(utils.INT_SIZE), "big")
    filename_size = int.from_bytes(socket.receive_data(utils.INT_SIZE), "big")

    # Recieve filename
    filename = socket.receive_data(filename_size).decode()
    logger.info(f"Receiving filename: {filename}")

    # Recieve file
    with open(os.path.join(dest_folder, filename), "wb") as f:
        while file_size > 0:
            data = socket.receive_data(min(utils.MSG_SIZE, file_size))
            f.write(data)
            file_size -= len(data)

    logger.info(f"Finished uploading: {filename}")
    socket.send_data(utils.Status.OK.value)


def send_file(socket, dest_folder, logger):
    # Recieve filename size
    filename_size = int.from_bytes(socket.receive_data(utils.INT_SIZE), "big")

    # Recieve filename
    filename = socket.receive_data(filename_size).decode()
    logger.info(f"Receiving filename: {filename}")

    # Send file size
    file_size = os.path.getsize(os.path.join(dest_folder, filename))
    socket.send_data(file_size.to_bytes(utils.INT_SIZE, byteorder="big"))

    # Send file
    # TODO: check if file exists, send error if it doesn't
    logger.info("Sending file")
    with open(os.path.join(dest_folder, filename), "rb") as f:
        while file_size > 0:
            msg_size = min(utils.MSG_SIZE, file_size)
            data = f.read(msg_size)
            socket.send_data(data)
            file_size -= len(data)

    logger.info("Waiting for client response")
    response = socket.receive_data(1)
    if response == utils.Status.ERROR.value:
        logger.error("File transfer failed")
    else:
        logger.info("File transfered")
    logger.info(f"Finished sending: {filename}")


def handle_new_connection(socket, dest_folder, logger):
    command = utils.Command(socket.receive_data(1))

    if command == utils.Command.UPLOAD:
        receive_file(socket, dest_folder, logger)

    if command == utils.Command.DOWNLOAD:
        send_file(socket, dest_folder, logger)



def start_server(server, dest_folder, logger):
    server.start()

    while True:
        socket = server.wait_for_connection()
        threading.Thread(target=handle_new_connection, args=(socket, dest_folder, logger)).start()



if __name__ == "__main__":
    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    args = utils.parse_server_start()
    ORANGE = '\033[0;33m'
    NC = '\033[0m'
    logging.basicConfig(
        level=args.verbose,
        format=f"%(asctime)s - [{ORANGE}server{NC} %(levelname)s] - %(message)s",
        datefmt="%Y/%m/%d %H:%M:%S",
    )
    logger = logging.getLogger(__name__)

    if args.protocol == utils.Protocol.TCP:
        server = TCPServer("localhost", args.port, logger)
        logger.info("Starting TCP server...")
    elif args.protocol == utils.Protocol.UDP:
        server = UDPServer("localhost", args.port, logger)
        logger.info("Starting UDP server...")

    try:
        start_server(server, args.dest, logger)
    except SigException:
        logger.info("Got signal. Exiting server...")
    except:
        traceback.print_exc()
    finally:
        logger.info("Stopping server...")
        server.stop_server()
