#!/usr/bin/python3
import signal
import logging
import traceback

from lib.tcpserver import TCPServer
from lib.udpserver import UDPServer
from lib.utils import parse_server_start, Protocol

class SigException(Exception):
    pass

def sig_handler(sig, frame):
    raise SigException()


if __name__ == "__main__":
    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    args = parse_server_start()
    logging.basicConfig(
        level=args.verbose,
        format="%(asctime)s - [server %(levelname)s] - %(message)s",
        datefmt="%Y/%m/%d %H:%M:%S",
    )
    logger = logging.getLogger(__name__)

    if args.protocol == Protocol.TCP:
        server = TCPServer("localhost", args.port, args.dest, logger)
        logger.info("Starting TCP server...")
    elif args.protocol == Protocol.UDP:
        server = UDPServer("localhost", args.port, args.dest, logger)
        logger.info("Starting UDP server...")

    try:
        server.start_server()
    except SigException:
        logger.info("Got signal. Exiting server...")
    except:
        traceback.print_exc()
    finally:
        logger.info("Stopping server...")
        server.stop_server()
