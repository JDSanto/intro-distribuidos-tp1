#!/usr/bin/python3
import logging
import os
import signal
import threading
import traceback

from lib import utils
from lib.gbn import GBNServer
from lib.metadata import Metadata
from lib.stopandwait import SaWServer
from lib.tcpserver import TCPServer
from lib.udpserver import UDPServer
from lib.utils import METADATA_FIXED_SIZE


class SigException(Exception):
    pass


def sig_handler(sig, frame):
    raise SigException()


def receive_file(socket, metadata, dest_folder, logger):
    if not os.path.isdir(dest_folder):
        logger.info(f"Creating destination folder: {dest_folder}")
        os.makedirs(dest_folder)

    file_size = metadata.filesize
    filename = metadata.filename

    # Receive file
    with open(os.path.join(dest_folder, filename), "wb") as f:
        while file_size > 0:
            data = socket.receive_data(min(utils.MSG_SIZE, file_size))
            f.write(data)
            file_size -= len(data)

    logger.info(f"Finished uploading: {filename}")
    socket.send_data(utils.Status.OK.value)


def send_file(socket, metadata, dest_folder, logger):
    filename = metadata.filename

    # Send file size
    logger.info("Sending file size")
    file_size = os.path.getsize(os.path.join(dest_folder, filename))
    socket.send_data(file_size.to_bytes(utils.INT_SIZE, byteorder="big"))

    # Send file
    logger.info("Sending file")
    with open(os.path.join(dest_folder, filename), "rb") as f:
        while file_size > 0:
            msg_size = min(utils.MSG_SIZE, file_size)
            data = f.read(msg_size)
            socket.send_data(data)
            file_size -= len(data)

    logger.info("Waiting for client response")
    response = socket.receive_data(1)
    if response == utils.Status.ERROR.value:
        logger.error("File transfer failed")
    else:
        logger.info("File transfered")

    logger.info(f"Finished sending: {filename}")


def serve(socket, dest_folder, logger):
    metadata = Metadata.from_bytes(socket.receive_data(METADATA_FIXED_SIZE))
    logger.info(f"Serving command: {metadata}")

    if metadata.is_upload():
        receive_file(socket, metadata, dest_folder, logger)

    if metadata.is_download():
        send_file(socket, metadata, dest_folder, logger)

    # Receive shutdown
    data = socket.receive_data(1)

    socket.close(wait=True)


def start_server(server, dest_folder, logger):
    server.start()

    while True:
        socket = server.wait_for_connection()
        if socket:
            threading.Thread(target=serve, args=(socket, dest_folder, logger)).start()


if __name__ == "__main__":
    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    args = utils.parse_server_start()
    ORANGE = "\033[0;33m"
    NC = "\033[0m"
    logging.basicConfig(
        level=args.verbose,
        format=f"%(asctime)s - [{ORANGE}server{NC} %(levelname)s] - %(message)s",
        datefmt="%Y/%m/%d %H:%M:%S",
    )
    logger = logging.getLogger(__name__)

    if args.protocol == utils.Protocol.TCP:
        server = TCPServer("localhost", args.port, logger)
        logger.info("Starting TCP server...")
    elif args.protocol == utils.Protocol.UDP:
        server = UDPServer("localhost", args.port, logger)
        logger.info("Starting UDP server...")
    elif args.protocol == utils.Protocol.SAW:
        server = SaWServer("localhost", args.port, logger)
        logger.info("Starting SaW server...")
    elif args.protocol == utils.Protocol.GBN:
        server = GBNServer("localhost", args.port, logger)
        logger.info("Starting File Transfer App with UDP+GBN...")

    try:
        start_server(server, args.dest, logger)
    except SigException:
        logger.info("Got signal. Exiting server...")
    except BaseException:
        traceback.print_exc()
    finally:
        logger.info("Stopping server...")
        server.stop_server()
